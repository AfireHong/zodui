---
import Header from './Header.astro'
export interface Props {
	title?: number
  includeMonaco?: boolean
}

const { title, includeMonaco = false } = Astro.props
---

<!DOCTYPE html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <link rel='alternate icon' class='js-site-favicon' type='image/png' href='/favicon.png'>
    <link rel='icon' class='js-site-favicon' type='image/svg+xml' href='/favicon.svg'>
		<meta name='generator' content={Astro.generator} />
		<title>Zod UI{title ? ` - ${title}` : ''}</title>
    {includeMonaco &&
      <script is:inline>
        var require = { paths: { vs: `${import.meta.env.BASE_URL}monaco/min/vs` } }
      </script>
      <link
        rel='stylesheet'
        data-name='vs/editor/editor.main'
        href={`${import.meta.env.BASE_URL}monaco/min/vs/editor/editor.main.css`}
      >
      <script
        src={`${import.meta.env.BASE_URL}monaco/min/vs/loader.js`}
        is:inline
      />
      <script
        src={`${import.meta.env.BASE_URL}monaco/min/vs/editor/editor.main.nls.js`}
        is:inline
      />
      <script
        src={`${import.meta.env.BASE_URL}monaco/min/vs/editor/editor.main.js`}
        is:inline
      />}
    <link rel='stylesheet' href='https://fonts.googleapis.com/icon?family=Material+Icons'>
	</head>
	<body>
    <Header />
		<slot />
	</body>
</html>
<style is:global lang='scss'>
	:root {
	}
  html[theme-mode='dark'] body > main {
    background-image: linear-gradient(120deg, #1d3259 20%, #354e7e 80%);
  }
	html {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
	}
  body {
    display: flex;
    margin: 0;
    padding-top: 60px;
    > main {
      width: 100%;
      height: calc(100vh - 60px);
      background-image: linear-gradient(120deg, #cfd7ea 20%, #a1c4fd 80%);
    }
  }
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>
<style is:global>
  div.message {
    position: fixed;
    top: 10px;
    left: 50%;
    transform: translate(-50%, -150%);
    padding: 1em;
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    opacity: 0;
    transition: 0.3s ease-in-out;
  }
  div.message.show {
    opacity: 1;
    transform: translateX(-50%);
  }
</style>
<template id='message-template'>
  <div class='message' is:raw>
    {{content}}
  </div>
</template>
<script is:inline>
  ;(function () {
    const tmplCache = {}
    /**
     * create a template from a template node
     *
     * @param {string} tmplId
     * @param {Record<string, any>} data
     * @returns {Element}
     */
    window.createEleByTmpl = function (tmplId, data) {
      const tmpl = tmplCache[tmplId] || (tmplCache[tmplId] = document.getElementById(tmplId).innerHTML.trim())

      const div = document.createElement('div')
      div.innerHTML = Object.keys(data).reduce((acc, key) => {
        return acc.replace(new RegExp(`{{${key}}}`, 'g'), data[key])
      }, tmpl)
      return div.children[0]
    }
    window.copyToClipboard = function (content) {
      const input = document.createElement('input')
      input.value = content
      document.body.appendChild(input)
      input.select()
      document.execCommand('copy')
      document.body.removeChild(input)
    }
    window.base64 = function (str, isDecode = true) {
      return isDecode ? decodeURIComponent(atob(str)) : btoa(encodeURIComponent(str))
    }
    window.throttle = function (fn, delay) {
      let timer = null
      return function (...args) {
        if (timer) return
        timer = setTimeout(() => {
          fn.apply(this, args)
          timer = null
        }, delay)
      }
    }
    window.debounce = function (fn, delay) {
      let timer = null
      return function (...args) {
        if (timer) clearTimeout(timer)
        timer = setTimeout(() => {
          fn.apply(this, args)
          timer = null
        }, delay)
      }
    }
    let messages = []
    /**
     * display a message
     * @param {string} content
     * @param {number} duration
     */
    window.showMessage = function (content, duration = 3000) {
      const message = createEleByTmpl('message-template', { content })
      // compute message top
      const top = messages.reduce((acc, msg) => {
        return acc + msg.offsetHeight + 10
      }, 10)
      message.style.top = top + 'px'
      document.body.appendChild(message)
      messages.push(message)
      setTimeout(() => {
        message.classList.add('show')
      }, 0)
      setTimeout(() => {
        message.classList.remove('show')
        setTimeout(() => {
          document.body.removeChild(message)
          messages = messages.filter((m) => m !== message)
        }, 300)
      }, duration)
    }
  })()
</script>
